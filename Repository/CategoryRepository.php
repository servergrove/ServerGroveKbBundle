<?php

namespace ServerGrove\KbBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\PHPCR\DocumentRepository;
use PHPCR\Query\QueryInterface;
use ServerGrove\KbBundle\Document\Category;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends DocumentRepository
{

    /**
     * @param  bool  $displayPrivate
     * @return array
     * @TODO create query for this case
     */
    public function findAllParentsActive($displayPrivate = true)
    {
        $parents    = $this->findAllParents($displayPrivate);
        $collection = new \Doctrine\Common\Collections\ArrayCollection();

        /** @var $parent \ServerGrove\KbBundle\Document\Category */
        foreach ($parents as $parent) {
            $collection->add($parent);
        }

        return $collection;
    }

    /**
     * @param  bool  $displayPrivate
     * @return array
     */
    public function findAllParents($displayPrivate = true)
    {
        /** @var $all \Doctrine\Common\Collections\ArrayCollection */
        $all = new ArrayCollection();

        /** @var $categories ArrayCollection */
        $categories = $this
            ->getDocumentByStringQuery($this->getParentsQueryString())
            ->filter($this->getFilterClosure($displayPrivate));

        $array = $categories->toArray();

        usort(
            $array,
            function (Category $categoryA, Category $categoryB) {
                if ($categoryA->getName() == $categoryB->getName()) {
                    return 0;
                }

                return strnatcmp($categoryA->getName(), $categoryB->getName());
            }
        );

        foreach ($array as $category) {
            $all->add($category);
        }

        return $all;
    }

    public function getFilterClosure($displayPrivate)
    {
        if ($displayPrivate) {
            return function () { return true; };
        }

        return function (Category $category) { return Category::VISIBILITY_PRIVATE !== $category->getVisibility(); };
    }

    private function getParentsQueryString()
    {
        return 'SELECT * FROM [nt:unstructured] WHERE ISCHILDNODE("/categories")';
    }

    private function getDocumentByStringQuery($string)
    {
        return $this->getDocumentsByQuery($this->createQuery($string, QueryInterface::JCR_SQL2));
    }
}
